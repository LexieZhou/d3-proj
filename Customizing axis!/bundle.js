(function (d3) {
  'use strict';

  const svg = d3.select('svg');
  const height = +svg.attr('height');
  const width = +svg.attr('width');

  const render = data => {
    const xValue = d => d.population;
    const yValue = d => d.country;
    const margin = {top:30, left:100, right: 40, bottom: 20};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
    	.domain([0, d3.max(data, xValue)])
    	.range([0, innerWidth]);
    const yScale = d3.scaleBand()
    	.domain(data.map(yValue))
    	.range([0, innerHeight])
    	.padding(0.1);

    
    const g = svg.append('g')
    	.attr('transform', `translate(${margin.left},${margin.top})`);
    const xAxisTickFormat = number => d3.format('.3s')(number)
    	.replace('G','B');
    const xAxis = d3.axisBottom(xScale)
    	.tickFormat(xAxisTickFormat)
    	.tickSize(-innerHeight);
    
    g.append('g')
      .call(d3.axisLeft(yScale))
    	.selectAll('.domain, .tick line')
    		.remove();
    const xAxisG = g.append('g').call(xAxis)
    	.attr('transform', `translate(0,${innerHeight})`);
    xAxisG.select('.domain').remove();
    xAxisG.append('text')
    	.attr('x', innerWidth/2)
    	.attr('y', 0)
    	.attr('fill', 'black')
    	.text('population');
    
    g.selectAll('rect').data(data)
    	.enter().append('rect')
    		.attr('y', d => yScale(yValue(d)))
    		.attr('width', d => xScale(xValue(d)))
    		.attr('height', yScale.bandwidth());
    g.append('text')
    	.attr('class', 'title')
    	.text('Top 10 most Populous Countries');
  };

  d3.csv('data.csv').then(data=>{
    data.forEach(d => {
      d.population = +d.population*1000;
    });
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgXG4gICAgICAgIGNzdiwgXG4gICAgICAgIHNjYWxlTGluZWFyLCBcbiAgICAgICAgbWF4LCBcbiAgICAgICAgc2NhbGVCYW5kLFxuICAgICAgIFx0YXhpc0xlZnQsXG4gICAgICAgIGF4aXNCb3R0b20sXG4gICAgICAgIGZvcm1hdFxufSBmcm9tICdkMyc7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5jb25zdCBoZWlnaHQgPSArc3ZnLmF0dHIoJ2hlaWdodCcpO1xuY29uc3Qgd2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJyk7XG5cbmNvbnN0IHJlbmRlciA9IGRhdGEgPT4ge1xuICBjb25zdCB4VmFsdWUgPSBkID0+IGQucG9wdWxhdGlvbjtcbiAgY29uc3QgeVZhbHVlID0gZCA9PiBkLmNvdW50cnk7XG4gIGNvbnN0IG1hcmdpbiA9IHt0b3A6MzAsIGxlZnQ6MTAwLCByaWdodDogNDAsIGJvdHRvbTogMjB9O1xuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaW5uZXJIZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgXHQuZG9tYWluKFswLCBtYXgoZGF0YSwgeFZhbHVlKV0pXG4gIFx0LnJhbmdlKFswLCBpbm5lcldpZHRoXSk7XG4gIGNvbnN0IHlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gIFx0LmRvbWFpbihkYXRhLm1hcCh5VmFsdWUpKVxuICBcdC5yYW5nZShbMCwgaW5uZXJIZWlnaHRdKVxuICBcdC5wYWRkaW5nKDAuMSk7XG5cbiAgXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuICBjb25zdCB4QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT4gZm9ybWF0KCcuM3MnKShudW1iZXIpXG4gIFx0LnJlcGxhY2UoJ0cnLCdCJyk7XG4gIGNvbnN0IHhBeGlzID0gYXhpc0JvdHRvbSh4U2NhbGUpXG4gIFx0LnRpY2tGb3JtYXQoeEF4aXNUaWNrRm9ybWF0KVxuICBcdC50aWNrU2l6ZSgtaW5uZXJIZWlnaHQpO1xuICBcbiAgZy5hcHBlbmQoJ2cnKVxuICAgIC5jYWxsKGF4aXNMZWZ0KHlTY2FsZSkpXG4gIFx0LnNlbGVjdEFsbCgnLmRvbWFpbiwgLnRpY2sgbGluZScpXG4gIFx0XHQucmVtb3ZlKCk7XG4gIGNvbnN0IHhBeGlzRyA9IGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7aW5uZXJIZWlnaHR9KWApO1xuICB4QXhpc0cuc2VsZWN0KCcuZG9tYWluJykucmVtb3ZlKCk7XG4gIHhBeGlzRy5hcHBlbmQoJ3RleHQnKVxuICBcdC5hdHRyKCd4JywgaW5uZXJXaWR0aC8yKVxuICBcdC5hdHRyKCd5JywgMClcbiAgXHQuYXR0cignZmlsbCcsICdibGFjaycpXG4gIFx0LnRleHQoJ3BvcHVsYXRpb24nKTtcbiAgXG4gIGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICBcdC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gIFx0XHQuYXR0cigneScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cignd2lkdGgnLCBkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICBcdFx0LmF0dHIoJ2hlaWdodCcsIHlTY2FsZS5iYW5kd2lkdGgoKSk7XG4gIGcuYXBwZW5kKCd0ZXh0JylcbiAgXHQuYXR0cignY2xhc3MnLCAndGl0bGUnKVxuICBcdC50ZXh0KCdUb3AgMTAgbW9zdCBQb3B1bG91cyBDb3VudHJpZXMnKVxufTtcblxuY3N2KCdkYXRhLmNzdicpLnRoZW4oZGF0YT0+e1xuICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgZC5wb3B1bGF0aW9uID0gK2QucG9wdWxhdGlvbioxMDAwO1xuICB9KVxuICByZW5kZXIoZGF0YSk7XG59KTsiXSwibmFtZXMiOlsic2VsZWN0Iiwic2NhbGVMaW5lYXIiLCJtYXgiLCJzY2FsZUJhbmQiLCJmb3JtYXQiLCJheGlzQm90dG9tIiwiYXhpc0xlZnQiLCJjc3YiXSwibWFwcGluZ3MiOiI7OztFQVVBLE1BQU0sR0FBRyxHQUFHQSxTQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDMUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ25DLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQztFQUNBLE1BQU0sTUFBTSxHQUFHLElBQUksSUFBSTtFQUN2QixFQUFFLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDO0VBQ25DLEVBQUUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7RUFDaEMsRUFBRSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztFQUMzRCxFQUFFLE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDeEQsRUFBRSxNQUFNLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQzFEO0VBQ0EsRUFBRSxNQUFNLE1BQU0sR0FBR0MsY0FBVyxFQUFFO0VBQzlCLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFQyxNQUFHLENBQUMsSUFBSSxFQUFFLE1B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